/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction() {
    return null;
}
//end your code

var bar = 'not a function';
var barType = typeof bar;

/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here


bar = function (doublearray) {

    if (typeof (doublearray) === 'object') {
        for (var i = 0; i < doublearray.length; i++) {
            if (typeof (doublearray[i]) == 'number') {
                doublearray[i] = doublearray[i] * 2;
            }
            else {
                return false;
            }
        }
    }
    else {
        return false;
    }
    return true;
}


//end your code

/**
* Creates a new GitLog
* @class
* @prop {string} hash - the hash of the commit
* @prop {Date} date - the date of the commit as a JS Date object
* @prop {string} message - the commit message
*/
function GitLog(hash, date, message) {
	this.hash = hash;
	this.date = date;
	this.message = message;
}

/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
* 
*
* @param {array.<string>} logArray - an array of Git commit messages of the above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/

//your code here
/*
function parseGit(logArray) {
    var i, log, hash, date, message, cut1, cut2, newLog;
    var gitLogArray = new Array();

    for (i = 0; i < logArray.length; i++) {
        log = logArray[i];
        cut1 = log.indexOf(' ');
        cut2 = log.indexOf('"');
        hash = log.slice(0, cut1);
        date = new Date(log.slice(cut1 + 1, cut2 - 1));
        message = log.slice(cut2);
        message = message.replace(/"/g, '');
        newLog = new GitLog(hash, date, message);
        gitLogArray.push(newLog);
    }
    return gitLogArray;
}
*/
function parseGit(array) {

    var hash;
    var date;
    var message;
    var endofhash;
    var endofdate;
    var endofmessage;
    var temparray;
    var gitLogArray = new Array;
    var temp;

    for (var i = 0; i < array.length; i++) {
        temp = array[i];
        endofhash = temp.indexOf(' ');
        endofdate = temp.indexOf('"');
        endofmessage = temp.indexOf('"', endofdate+1);
        hash = temp.slice(0, endofhash);
        date = (temp.slice(endofhash + 1, endofdate - 1));
        date = new Date(date);
        message = temp.slice(endofdate + 1, endofmessage);
        temparray = new GitLog(hash, date, message);
        gitLogArray.push(temparray);
    }

    return gitLogArray;
}


//end your code
